// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package encoding

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE453ad8fDecodeGithubComSignalfxMetricproxySamplingHistoEncoding(in *jlexer.Lexer, out *SpanIdentity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Service":
			out.Service = string(in.String())
		case "Operation":
			out.Operation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE453ad8fEncodeGithubComSignalfxMetricproxySamplingHistoEncoding(out *jwriter.Writer, in SpanIdentity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Service\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Service))
	}
	{
		const prefix string = ",\"Operation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpanIdentity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE453ad8fEncodeGithubComSignalfxMetricproxySamplingHistoEncoding(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpanIdentity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE453ad8fEncodeGithubComSignalfxMetricproxySamplingHistoEncoding(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpanIdentity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE453ad8fDecodeGithubComSignalfxMetricproxySamplingHistoEncoding(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpanIdentity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE453ad8fDecodeGithubComSignalfxMetricproxySamplingHistoEncoding(l, v)
}
func easyjsonE453ad8fDecodeGithubComSignalfxMetricproxySamplingHistoEncoding1(in *jlexer.Lexer, out *OnDisk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Digests":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Digests = make(map[SpanIdentity][]int64)
				} else {
					out.Digests = nil
				}
				for !in.IsDelim('}') {
					var key SpanIdentity
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v1 []int64
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]int64, 0, 8)
							} else {
								v1 = []int64{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 int64
							v2 = int64(in.Int64())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Digests)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Last":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Last = make(map[SpanIdentity]time.Time)
				} else {
					out.Last = nil
				}
				for !in.IsDelim('}') {
					var key SpanIdentity
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v3 time.Time
					if data := in.Raw(); in.Ok() {
						in.AddError((v3).UnmarshalJSON(data))
					}
					(out.Last)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MetricsReservoirSize":
			out.MetricsReservoirSize = int(in.Int())
		case "MetricsAlphaFactor":
			out.MetricsAlphaFactor = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE453ad8fEncodeGithubComSignalfxMetricproxySamplingHistoEncoding1(out *jwriter.Writer, in OnDisk) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Digests) != 0 {
		const prefix string = ",\"Digests\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Digests {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v4Name).MarshalJSON())
				out.RawByte(':')
				if v4Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4Value {
						if v5 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v6))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Last) != 0 {
		const prefix string = ",\"Last\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Last {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v7Name).MarshalJSON())
				out.RawByte(':')
				out.Raw((v7Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	if in.MetricsReservoirSize != 0 {
		const prefix string = ",\"MetricsReservoirSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MetricsReservoirSize))
	}
	if in.MetricsAlphaFactor != 0 {
		const prefix string = ",\"MetricsAlphaFactor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MetricsAlphaFactor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OnDisk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE453ad8fEncodeGithubComSignalfxMetricproxySamplingHistoEncoding1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OnDisk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE453ad8fEncodeGithubComSignalfxMetricproxySamplingHistoEncoding1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OnDisk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE453ad8fDecodeGithubComSignalfxMetricproxySamplingHistoEncoding1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OnDisk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE453ad8fDecodeGithubComSignalfxMetricproxySamplingHistoEncoding1(l, v)
}
